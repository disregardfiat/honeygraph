# Complete SPK Network Schema for Dgraph
# Generated from spk-schema-dgraph.graphql

# Account predicates
username: string @index(exact, term) @upsert .
avatar: string .
description: string .
reputation: int @index(int) .
publicKey: string @index(hash) .
stakeMultiplier: float @index(float) .
balance: int @index(int) .
balances: uid .
staked: int @index(int) .
stakingPower: int @index(int) .
votingPower: int @index(int) .
contracts: uid @reverse .
contractsStoring: uid @reverse .
nodes: uid @reverse .
services: uid @reverse .
nodeMarketBid: uid .
encryptionKeys: uid @reverse .
successRate: float @index(float) .

# StorageContract predicates
id: string @index(exact) @upsert .
purchaser: uid @reverse .
contractType: int @index(int) .
blockNumber: int @index(int) .
txid: string @index(hash) .
authorized: int @index(int) .
broker: string @index(term) .
status: int @index(int) .
power: int @index(int) .
refunded: int @index(int) .
utilized: int @index(int) .
verified: int @index(int) .
files: uid @reverse .
fileCount: int @index(int) .
expiresBlock: int @index(int) .
expiresChronId: string .
extensions: uid @reverse .
autoRenew: bool @index(bool) .
expires: int @index(int) .
fee: int @index(int) .
storageNodes: uid @reverse .
payouts: uid @reverse .
payoutCount: int @index(int) .
totalPayout: int @index(int) .
metadata: uid .
path: string @index(term) .
encryptionData: string .
encryptionType: string @index(term) .
contentType: string @index(term) .
license: string .
flagsNumeric: int .
labelList: [string] .
customFields: string .
owner: uid @reverse .

# ContractFile predicates
cid: string @index(hash) @upsert .
path: string @index(term, trigram) .
name: string @index(term, fulltext) .
extension: string @index(term) .
size: int @index(int) .
encoding: string .
mimeType: string @index(term) .
license: string .
labels: string .
thumbnail: string .
flags: int .
contract: uid @reverse .

# Balance predicates
token: string @index(exact) .
amount: int @index(int) .
staked: int @index(int) .
delegated: int @index(int) .
liquid: int @index(int) .
account: uid @reverse .

# Path predicates
fullPath: string @index(exact, trigram) @upsert .
pathName: string @index(term) .
pathType: string @index(exact) .
parentPath: uid @reverse .
childPaths: uid .
itemCount: int @index(int) .
owner: uid @reverse .
files: uid .
lastModified: int @index(int) .
totalSize: int @index(int) .

# Types
type Account {
  username
  avatar
  description
  reputation
  publicKey
  stakeMultiplier
  balance
  balances
  staked
  stakingPower
  votingPower
  contracts
  contractsStoring
  nodes
  services
  nodeMarketBid
  encryptionKeys
  successRate
}

type StorageContract {
  id
  purchaser
  contractType
  blockNumber
  txid
  authorized
  broker
  status
  power
  refunded
  utilized
  verified
  files
  fileCount
  expiresBlock
  expiresChronId
  extensions
  autoRenew
  expires
  fee
  nodes
  storageNodes
  payouts
  payoutCount
  totalPayout
  metadata
  path
  encryptionData
  encryptionType
  contentType
  license
  flagsNumeric
  labelList
  customFields
  owner
}

type ContractFile {
  cid
  path
  name
  extension
  size
  encoding
  mimeType
  license
  labels
  thumbnail
  flags
  contract
}

type Balance {
  token
  amount
  staked
  delegated
  liquid
  account
}

type Path {
  fullPath
  pathName
  pathType
  parentPath
  childPaths
  itemCount
  owner
  files
  lastModified
  totalSize
}

# Additional predicates for other types can be added here

# Common predicates that might be used across types
lastValidated: int @index(int) .
nodeTotal: int @index(int) .
statusText: string @index(term) .
isUnderstored: bool @index(bool) .