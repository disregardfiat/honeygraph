# SPK Test Network Schema Extensions
# This schema is applied in addition to the base schema for the spkccT_ network
# NOTE: Only includes predicates NOT in base schema to avoid conflicts

# Additional Account predicates not in base schema
avatar: string .
description: string .
reputation: int @index(int) .
publicKey: string @index(hash) .
stakeMultiplier: float @index(float) .
balance: int @index(int) .
balances: uid .
staked: int @index(int) .
stakingPower: int @index(int) .
votingPower: int @index(int) .
contracts: uid @reverse .
contractsStoring: uid @reverse .
nodes: uid @reverse .
services: uid @reverse .
nodeMarketBid: uid .
encryptionKeys: uid @reverse .
successRate: float @index(float) .

# StorageContract predicates (only those not in base)
id: string @index(exact) @upsert .
purchaser: uid @reverse .
contractType: int @index(int) .
blockNumber: int @index(int) .
txid: string @index(hash) .
authorized: int @index(int) .
broker: string @index(term) .
# status: conflicts with base schema (string vs int)
power: int @index(int) .
refunded: int @index(int) .
utilized: int @index(int) .
verified: int @index(int) .
files: uid @reverse .
# fileCount: conflicts with base schema (no index vs index)
expiresBlock: int @index(int) .
expiresChronId: string .
extensions: uid @reverse .
autoRenew: bool @index(bool) .
expires: int @index(int) .
fee: int @index(int) .
storageNodes: uid @reverse .
payouts: uid @reverse .
payoutCount: int @index(int) .
totalPayout: int @index(int) .
metadata: uid .
encryptionData: string .
encryptionType: string @index(term) .
contentType: string @index(term) .
license: string .
flagsNumeric: int .
labelList: [string] .
customFields: string .

# ContractFile predicates (only those not in base)
# cid, path, mimeType already in base
name: string @index(term, fulltext) .
extension: string @index(term) .
size: int @index(int) .
encoding: string .
labels: string .
thumbnail: string .
flags: int .
contract: uid @reverse .

# Balance predicates
token: string @index(exact) .
amount: int @index(int) .
delegated: int @index(int) .
liquid: int @index(int) .
account: uid @reverse .

# Path predicates (only those not in base)
fullPath: string @index(exact, trigram) @upsert .
pathName: string @index(term) .
pathType: string @index(exact) .
# parentPath already in base
childPaths: uid .
itemCount: int @index(int) .
# owner already in base
lastModified: int @index(int) .
totalSize: int @index(int) .

# SPK-specific predicates
SPKValidator.account: uid @reverse .
SPKValidator.pubKey: string @index(hash) .
SPKValidator.code: string @index(exact) .
SPKValidator.domain: string @index(exact) .
SPKValidator.votes: int .
SPKValidator.rank: int .
SPKValidator.active: bool @index(bool) .
SPKValidator.lastBlock: int .
SPKValidator.consensusRate: float .

# SPK Types
type SPKValidator {
  SPKValidator.account
  SPKValidator.pubKey
  SPKValidator.code
  SPKValidator.domain
  SPKValidator.votes
  SPKValidator.rank
  SPKValidator.active
  SPKValidator.lastBlock
  SPKValidator.consensusRate
}

# LARYNX Mining specific
LarynxMiner.account: uid @reverse .
LarynxMiner.power: int .
LarynxMiner.miningRate: float .
LarynxMiner.lastClaim: datetime .
LarynxMiner.totalMined: int .

type LarynxMiner {
  LarynxMiner.account
  LarynxMiner.power
  LarynxMiner.miningRate
  LarynxMiner.lastClaim
  LarynxMiner.totalMined
}

# BROCA specific
BrocaRegeneration.account: uid @reverse .
BrocaRegeneration.baseAmount: int .
BrocaRegeneration.regenerationRate: float .
BrocaRegeneration.lastUpdate: int .
BrocaRegeneration.maxBroca: int .

type BrocaRegeneration {
  BrocaRegeneration.account
  BrocaRegeneration.baseAmount
  BrocaRegeneration.regenerationRate
  BrocaRegeneration.lastUpdate
  BrocaRegeneration.maxBroca
}

# Account type
type Account {
  username
  avatar
  description
  reputation
  publicKey
  stakeMultiplier
  balance
  balances
  staked
  stakingPower
  votingPower
  contracts
  contractsStoring
  nodes
  services
  nodeMarketBid
  encryptionKeys
  successRate
}

# StorageContract type
type StorageContract {
  id
  purchaser
  contractType
  blockNumber
  txid
  authorized
  broker
  status
  power
  refunded
  utilized
  verified
  files
  fileCount
  expiresBlock
  expiresChronId
  extensions
  autoRenew
  expires
  fee
  storageNodes
  payouts
  payoutCount
  totalPayout
  metadata
  path
  encryptionData
  encryptionType
  contentType
  license
  flagsNumeric
  labelList
  customFields
  owner
}

# ContractFile type
type ContractFile {
  cid
  path
  name
  extension
  size
  encoding
  mimeType
  license
  labels
  thumbnail
  flags
  contract
}

# Balance type
type Balance {
  token
  amount
  staked
  delegated
  liquid
  account
}

# Path type
type Path {
  fullPath
  pathName
  pathType
  parentPath
  childPaths
  itemCount
  owner
  files
  lastModified
  totalSize
}